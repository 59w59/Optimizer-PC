import os

def fix_windows_optimizer():
    """Corrige o arquivo windows_optimizer.py adicionando a fun√ß√£o run() faltante"""
    
    print("üîß CORRETOR AUTOM√ÅTICO - WINDOWS OPTIMIZER")
    print("=" * 50)
    
    # Verificar se o arquivo existe
    if not os.path.exists("windows_optimizer.py"):
        print("‚ùå Arquivo windows_optimizer.py n√£o encontrado!")
        return False
    
    # Ler arquivo atual
    print("üìñ Lendo arquivo atual...")
    with open("windows_optimizer.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # Verificar se j√° tem a fun√ß√£o run
    if "def run(self):" in content:
        print("‚úÖ Fun√ß√£o run() j√° existe!")
        return True
    
    # Adicionar fun√ß√£o run() antes do if __name__ == "__main__":
    run_function = '''
    def run(self):
        """Fun√ß√£o principal que executa o loop do otimizador"""
        self.logger.info("M√©todo run() iniciado")
        
        try:
            while True:
                self.logger.debug("Exibindo menu...")
                self.show_menu()
                
                try:
                    choice = input("Escolha uma op√ß√£o (1-13): ").strip()
                    self.logger.info(f"Usu√°rio escolheu op√ß√£o: {choice}")
                    
                    if choice == '1':
                        self.logger.info("Executando limpeza avan√ßada...")
                        self.advanced_file_cleanup()
                    elif choice == '2':
                        self.logger.info("Executando otimiza√ß√£o de inicializa√ß√£o...")
                        self.startup_optimization()
                    elif choice == '3':
                        self.logger.info("Executando gerenciamento de recursos...")
                        self.system_resources_management()
                    elif choice == '4':
                        self.logger.info("Executando otimiza√ß√£o de rede...")
                        self.network_optimization()
                    elif choice == '5':
                        self.logger.info("Executando gerenciamento de hardware...")
                        self.hardware_driver_management()
                    elif choice == '6':
                        self.logger.info("Executando tweaks de registro...")
                        self.advanced_registry_tweaks()
                    elif choice == '7':
                        self.logger.info("Executando ferramentas nativas...")
                        self.native_windows_tools()
                    elif choice == '8':
                        self.logger.info("Executando seguran√ßa e performance...")
                        self.security_performance()
                    elif choice == '9':
                        self.logger.info("Executando otimiza√ß√µes espec√≠ficas...")
                        self.specific_case_optimization()
                    elif choice == '10':
                        self.logger.info("Executando dicas diversas...")
                        self.miscellaneous_tips()
                    elif choice == '11':
                        self.logger.info("Exibindo informa√ß√µes do sistema...")
                        self.show_detailed_system_info()
                    elif choice == '12':
                        self.logger.info("Executando otimiza√ß√£o completa...")
                        self.complete_optimization()
                    elif choice == '13':
                        self.logger.info("Usu√°rio escolheu sair...")
                        print("üëã Saindo do otimizador...")
                        sys.exit(0)
                    else:
                        self.logger.warning(f"Op√ß√£o inv√°lida escolhida: {choice}")
                        print("‚ùå Op√ß√£o inv√°lida!")
                        
                    input("\\nPressione Enter para continuar...")
                    
                except Exception as e:
                    self.logger.error(f"Erro no loop principal: {e}")
                    self.logger.error(traceback.format_exc())
                    print(f"‚ùå Erro: {str(e)}")
                    input("\\nPressione Enter para continuar...")
                    
        except KeyboardInterrupt:
            self.logger.info("Programa interrompido pelo usu√°rio (Ctrl+C)")
            print("\\nüëã Saindo do otimizador...")
            sys.exit(0)
        except Exception as e:
            self.logger.error(f"Erro fatal no m√©todo run(): {e}")
            self.logger.error(traceback.format_exc())
            raise

'''
    
    # Inserir fun√ß√£o antes do if __name__
    if 'if __name__ == "__main__":' in content:
        # Dividir conte√∫do
        parts = content.split('if __name__ == "__main__":')
        
        # Adicionar fun√ß√£o run antes do main
        new_content = parts[0] + run_function + '\nif __name__ == "__main__":' + parts[1]
        
        # Criar backup
        print("üíæ Criando backup...")
        with open("windows_optimizer_backup.py", "w", encoding="utf-8") as f:
            f.write(content)
        
        # Salvar arquivo corrigido
        print("üíæ Salvando arquivo corrigido...")
        with open("windows_optimizer.py", "w", encoding="utf-8") as f:
            f.write(new_content)
        
        print("‚úÖ Arquivo corrigido com sucesso!")
        print("üìÑ Backup salvo como: windows_optimizer_backup.py")
        return True
    else:
        print("‚ùå N√£o foi poss√≠vel encontrar local para inserir fun√ß√£o")
        return False

def main():
    print("üîß CORRETOR AUTOM√ÅTICO")
    print("üéØ Este script corrige o Windows Optimizer automaticamente")
    print()
    
    try:
        if fix_windows_optimizer():
            print("\nüéâ CORRE√á√ÉO CONCLU√çDA!")
            print("‚úÖ O Windows Optimizer agora deve funcionar")
            print("üöÄ Execute: python windows_optimizer.py")
        else:
            print("\nüí• FALHA NA CORRE√á√ÉO")
            print("‚ùå Verifique o arquivo manualmente")
    
    except Exception as e:
        print(f"\nüí• ERRO: {e}")
        import traceback
        traceback.print_exc()
    
    input("\nPressione Enter para sair...")

if __name__ == "__main__":
    main()
